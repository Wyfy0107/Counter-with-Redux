{"version":3,"sources":["App.tsx","Redux/ActionCreator.tsx","Redux/Reducer.tsx","Redux/Store.tsx","index.tsx"],"names":["DisplayWrapper","styled","div","Button","button","connect","state","count","dispatch","increment","type","decrement","add_5","value","subtract_5","reset","getUserInput","event","multiply","props","onClick","onChange","style","fontSize","initialState","userInput","myStore","createStore","action","parseInt","target","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"msBAgBA,IAAMA,EAAiBC,IAAOC,IAAV,KAMdC,EAASF,IAAOG,OAAV,KAmDZ,IAmBeC,eAnBS,SAACC,GACvB,MAAO,CACLC,MAAOD,EAAMC,UAIU,SAACC,GAC1B,MAAO,CACLC,UAAW,kBAAMD,EC7EZ,CAAEE,KAAM,eD8EbC,UAAW,kBAAMH,EC1EZ,CAAEE,KAAM,eD2EbE,MAAO,kBAAMJ,ECvER,CAAEE,KAAM,QAASG,MAAO,KDwE7BC,WAAY,kBAAMN,ECpEb,CAAEE,KAAM,aAAcG,MAAO,KDqElCE,MAAO,kBAAMP,ECjER,CAAEE,KAAM,QAASG,MAAO,KDkE7BG,aAAc,SAACC,GAAD,OACZT,EChEsB,SAC1BS,GAEA,MAAO,CAAEP,KAAM,iBAAkBG,MAAOI,GD6D3BD,CAAaC,KACxBC,SAAU,kBAAMV,EC1DX,CAAEE,KAAM,iBD8DFL,EA5Cf,SAAac,GACX,OACE,6BACE,qCACA,kBAACnB,EAAD,KAAiBmB,EAAMZ,OACvB,6BAEA,kBAACJ,EAAD,CAAQiB,QAASD,EAAMV,WAAvB,aACA,kBAACN,EAAD,CAAQiB,QAASD,EAAMR,WAAvB,aACA,kBAACR,EAAD,CAAQiB,QAASD,EAAMP,OAAvB,SAEA,kBAACT,EAAD,CAAQiB,QAASD,EAAML,YAAvB,cACA,kBAACX,EAAD,CAAQiB,QAASD,EAAMJ,OAAvB,SACA,6BACE,kBAACZ,EAAD,CAAQiB,QAASD,EAAMD,UAAvB,eACA,2BACER,KAAK,SACLW,SAAU,SAAAJ,GAAK,OAAIE,EAAMH,aAAaC,IACtCK,MAAO,CAAEC,SAAU,iB,cE3DvBC,EAA2B,CAC/BjB,MAAO,EACPkB,UAAW,GCLEC,EADCC,aDSW,WAGT,IAFhBrB,EAEe,uDAFPkB,EACRI,EACe,uCACf,OAAQA,EAAOlB,MACb,IAAK,YACH,OAAO,2BAAKJ,GAAZ,IAAmBC,MAAOD,EAAMC,MAAQ,IAC1C,IAAK,YACH,OAAO,2BAAKD,GAAZ,IAAmBC,MAAOD,EAAMC,MAAQ,IAC1C,IAAK,QACH,OAAO,2BAAKD,GAAZ,IAAmBC,MAAOD,EAAMC,MAASqB,EAAOf,QAClD,IAAK,aACH,OAAO,2BAAKP,GAAZ,IAAmBC,MAAOD,EAAMC,MAASqB,EAAOf,QAClD,IAAK,QACH,OAAO,2BAAKP,GAAZ,IAAmBC,MAAOqB,EAAOf,QACnC,IAAK,iBACH,IAAMI,EAAQW,EAAOf,MACfA,EAAQgB,SAASZ,EAAMa,OAAOjB,OACpC,OAAO,2BAAKP,GAAZ,IAAmBmB,UAAWZ,IAChC,IAAK,WACH,OAAO,2BACFP,GADL,IAEEC,MAAOD,EAAMC,MAAQD,EAAMmB,YAE/B,QACE,OAAOnB,ME9BbyB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOR,GACf,kBAAC,EAAD,QAGJS,SAASC,eAAe,W","file":"static/js/main.09c56f9d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./CSS/App.css\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\nimport {\n  increment,\n  decrement,\n  add_5,\n  subtract_5,\n  reset,\n  multiply,\n  getUserInput,\n} from \"./Redux/ActionCreator\";\nimport { ReduxStore } from \"./Redux/Reducer\";\nimport styled from \"styled-components\";\n\nconst DisplayWrapper = styled.div`\n  color: white;\n  margin: 5rem 0 0;\n  font-size: 2rem;\n`;\n\nconst Button = styled.button`\n  margin: 1rem;\n  color: #ffac41;\n  background: #ff1e56;\n  font-size: 1.3rem;\n  text-decoration: none;\n  border: none;\n  padding: 5px;\n  transition: 0.5s;\n  border-radius: 5px;\n  &:hover {\n    transform: scale(1.2);\n  }\n`;\n\ntype AppProps = {\n  count: number;\n  increment: () => void;\n  decrement: () => void;\n  add_5: () => void;\n  subtract_5: () => void;\n  reset: () => void;\n  multiply: () => void;\n  getUserInput: (event: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nfunction App(props: AppProps) {\n  return (\n    <div>\n      <h1>hello</h1>\n      <DisplayWrapper>{props.count}</DisplayWrapper>\n      <br />\n\n      <Button onClick={props.increment}>INCREMENT</Button>\n      <Button onClick={props.decrement}>DECREMENT</Button>\n      <Button onClick={props.add_5}>Add 5</Button>\n\n      <Button onClick={props.subtract_5}>Subtract 5</Button>\n      <Button onClick={props.reset}>Reset</Button>\n      <div>\n        <Button onClick={props.multiply}>Multiply by</Button>\n        <input\n          type='number'\n          onChange={event => props.getUserInput(event)}\n          style={{ fontSize: \"1.5rem\" }}\n        ></input>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state: ReduxStore) => {\n  return {\n    count: state.count,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    increment: () => dispatch(increment()),\n    decrement: () => dispatch(decrement()),\n    add_5: () => dispatch(add_5()),\n    subtract_5: () => dispatch(subtract_5()),\n    reset: () => dispatch(reset()),\n    getUserInput: (event: React.ChangeEvent<HTMLInputElement>) =>\n      dispatch(getUserInput(event)),\n    multiply: () => dispatch(multiply()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { Calculation, AddAndSubtract, GetUserInput } from \"./actionTypes\";\nimport React from \"react\";\n\nexport const increment = (): Calculation => {\n  return { type: \"INCREMENT\" };\n};\n\nexport const decrement = (): Calculation => {\n  return { type: \"DECREMENT\" };\n};\n\nexport const add_5 = (): AddAndSubtract => {\n  return { type: \"ADD_5\", value: 5 };\n};\n\nexport const subtract_5 = (): AddAndSubtract => {\n  return { type: \"SUBTRACT_5\", value: 5 };\n};\n\nexport const reset = (): AddAndSubtract => {\n  return { type: \"RESET\", value: 0 };\n};\n\nexport const getUserInput = (\n  event: React.ChangeEvent<HTMLInputElement>\n): GetUserInput => {\n  return { type: \"GET_USER_INPUT\", value: event };\n};\n\nexport const multiply = (): Calculation => {\n  return { type: \"MULTIPLY\" };\n};\n","import { DispatchActions } from \"./actionTypes\";\n\nexport type ReduxStore = {\n  count: number;\n  userInput: number;\n};\n\nconst initialState: ReduxStore = {\n  count: 0,\n  userInput: 0,\n};\n\nexport const rootReducer = (\n  state = initialState,\n  action: DispatchActions\n): ReduxStore => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return { ...state, count: state.count + 1 };\n    case \"DECREMENT\":\n      return { ...state, count: state.count - 1 };\n    case \"ADD_5\":\n      return { ...state, count: state.count + (action.value as number) };\n    case \"SUBTRACT_5\":\n      return { ...state, count: state.count - (action.value as number) };\n    case \"RESET\":\n      return { ...state, count: action.value as number };\n    case \"GET_USER_INPUT\":\n      const event = action.value as React.ChangeEvent<HTMLInputElement>;\n      const value = parseInt(event.target.value);\n      return { ...state, userInput: value };\n    case \"MULTIPLY\":\n      return {\n        ...state,\n        count: state.count * state.userInput,\n      };\n    default:\n      return state;\n  }\n};\n","import { createStore } from 'redux';\nimport { rootReducer } from './Reducer';\n\nconst myStore = createStore(rootReducer);\nexport default myStore;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./CSS/index.css\";\nimport App from \"./App\";\nimport myStore from \"./Redux/Store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={myStore}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}
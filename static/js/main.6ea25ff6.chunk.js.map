{"version":3,"sources":["App.js","Redux/ActionCreator.js","serviceWorker.js","Redux/Reducer.js","Redux/Store.js","index.js"],"names":["DisplayWrapper","styled","div","Button","button","connect","state","count","dispatch","increment","type","decrement","add_5","value","subtract_5","reset","getUserInput","event","target","multiply","props","onClick","onChange","style","fontSize","Boolean","window","location","hostname","match","initialState","userInput","myStore","createStore","action","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6sBAcA,IAAMA,EAAiBC,IAAOC,IAAV,KAMdC,EAASF,IAAOG,OAAV,KAsCZ,IAkBeC,eAlBS,SAACC,GACxB,MAAO,CACNC,MAAOD,EAAMC,UAIY,SAACC,GAC3B,MAAO,CACNC,UAAW,kBAAMD,ECjEX,CAAEE,KAAM,eDkEdC,UAAW,kBAAMH,EC9DX,CAAEE,KAAM,eD+DdE,MAAO,kBAAMJ,EC3DP,CAAEE,KAAM,QAASG,MAAO,KD4D9BC,WAAY,kBAAMN,ECxDZ,CAAEE,KAAM,aAAcG,MAAO,KDyDnCE,MAAO,kBAAMP,ECrDP,CAAEE,KAAM,QAASG,MAAO,KDsD9BG,aAAc,SAACC,GAAD,OAAWT,ECnDC,SAACS,GAC5B,MAAO,CAAEP,KAAM,iBAAkBG,MAAOI,EAAMC,OAAOL,ODkDlBG,CAAaC,KAC/CE,SAAU,kBAAMX,EC/CV,CAAEE,KAAM,iBDmDDL,EAzCf,SAAae,GACZ,OACC,6BACC,kBAACpB,EAAD,KAAiBoB,EAAMb,OACvB,6BAEA,kBAACJ,EAAD,CAAQkB,QAASD,EAAMX,WAAvB,aACA,kBAACN,EAAD,CAAQkB,QAASD,EAAMT,WAAvB,aACA,kBAACR,EAAD,CAAQkB,QAASD,EAAMR,OAAvB,SAEA,kBAACT,EAAD,CAAQkB,QAASD,EAAMN,YAAvB,cACA,kBAACX,EAAD,CAAQkB,QAASD,EAAML,OAAvB,SACA,6BACC,kBAACZ,EAAD,CAAQkB,QAASD,EAAMD,UAAvB,eACA,2BACCT,KAAK,SACLY,SAAU,SAACL,GAAD,OAAWG,EAAMJ,aAAaC,IACxCM,MAAO,CAAEC,SAAU,iBExCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBClBAC,EAAe,CACpBvB,MAAO,EACPwB,UAAW,MCEGC,EADCC,aDEW,WAAmC,IAAlC3B,EAAiC,uDAAzBwB,EAAcI,EAAW,uCAC5D,OAAQA,EAAOxB,MACd,IAAK,YACJ,OAAO,2BAAKJ,GAAZ,IAAmBC,MAAOD,EAAMC,MAAQ,IACzC,IAAK,YACJ,OAAO,2BAAKD,GAAZ,IAAmBC,MAAOD,EAAMC,MAAQ,IACzC,IAAK,QACJ,OAAO,2BAAKD,GAAZ,IAAmBC,MAAOD,EAAMC,MAAQ2B,EAAOrB,QAChD,IAAK,aACJ,OAAO,2BAAKP,GAAZ,IAAmBC,MAAOD,EAAMC,MAAQ2B,EAAOrB,QAChD,IAAK,QACJ,OAAO,2BAAKP,GAAZ,IAAmBC,MAAO2B,EAAOrB,QAClC,IAAK,iBACJ,OAAO,2BAAKP,GAAZ,IAAmByB,UAAWG,EAAOrB,QACtC,IAAK,WACJ,OAAO,2BACHP,GADJ,IAECC,MAAOD,EAAMC,MAAQD,EAAMyB,YAE7B,QACC,OAAOzB,MEjBV6B,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,IAAD,CAAUC,MAAON,GAChB,kBAAC,EAAD,QAGFO,SAASC,eAAe,SHqHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6ea25ff6.chunk.js","sourcesContent":["import React from 'react';\nimport './CSS/App.css';\nimport { connect } from 'react-redux';\nimport {\n\tINCREMENT,\n\tDECREMENT,\n\tADD_5,\n\tSUBTRACT_5,\n\tRESET,\n\tMULTIPLY,\n\tgetUserInput,\n} from './Redux/ActionCreator';\nimport styled from 'styled-components';\n\nconst DisplayWrapper = styled.div`\n\tcolor: white;\n\tmargin: 5rem 0 0;\n\tfont-size: 2rem;\n`;\n\nconst Button = styled.button`\n\tmargin: 1rem;\n\tcolor: #ffac41;\n\tbackground: #ff1e56;\n\tfont-size: 1.3rem;\n\ttext-decoration: none;\n\tborder: none;\n\tpadding: 5px;\n\ttransition: 0.5s;\n\tborder-radius: 5px;\n\t&:hover {\n\t\ttransform: scale(1.2);\n\t}\n`;\n\nfunction App(props) {\n\treturn (\n\t\t<div>\n\t\t\t<DisplayWrapper>{props.count}</DisplayWrapper>\n\t\t\t<br />\n\n\t\t\t<Button onClick={props.increment}>INCREMENT</Button>\n\t\t\t<Button onClick={props.decrement}>DECREMENT</Button>\n\t\t\t<Button onClick={props.add_5}>Add 5</Button>\n\n\t\t\t<Button onClick={props.subtract_5}>Subtract 5</Button>\n\t\t\t<Button onClick={props.reset}>Reset</Button>\n\t\t\t<div>\n\t\t\t\t<Button onClick={props.multiply}>Multiply by</Button>\n\t\t\t\t<input\n\t\t\t\t\ttype='number'\n\t\t\t\t\tonChange={(event) => props.getUserInput(event)}\n\t\t\t\t\tstyle={{ fontSize: '1.5rem' }}></input>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tcount: state.count,\n\t};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tincrement: () => dispatch(INCREMENT()),\n\t\tdecrement: () => dispatch(DECREMENT()),\n\t\tadd_5: () => dispatch(ADD_5()),\n\t\tsubtract_5: () => dispatch(SUBTRACT_5()),\n\t\treset: () => dispatch(RESET()),\n\t\tgetUserInput: (event) => dispatch(getUserInput(event)),\n\t\tmultiply: () => dispatch(MULTIPLY()),\n\t};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const INCREMENT = () => {\r\n\treturn { type: 'INCREMENT' };\r\n};\r\n\r\nexport const DECREMENT = () => {\r\n\treturn { type: 'DECREMENT' };\r\n};\r\n\r\nexport const ADD_5 = () => {\r\n\treturn { type: 'ADD_5', value: 5 };\r\n};\r\n\r\nexport const SUBTRACT_5 = () => {\r\n\treturn { type: 'SUBTRACT_5', value: 5 };\r\n};\r\n\r\nexport const RESET = () => {\r\n\treturn { type: 'RESET', value: 0 };\r\n};\r\n\r\nexport const getUserInput = (event) => {\r\n\treturn { type: 'GET_USER_INPUT', value: event.target.value };\r\n};\r\n\r\nexport const MULTIPLY = () => {\r\n\treturn { type: 'MULTIPLY' };\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n\tcount: 0,\r\n\tuserInput: null,\r\n};\r\n\r\nexport const rootReducer = (state = initialState, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase 'INCREMENT':\r\n\t\t\treturn { ...state, count: state.count + 1 };\r\n\t\tcase 'DECREMENT':\r\n\t\t\treturn { ...state, count: state.count - 1 };\r\n\t\tcase 'ADD_5':\r\n\t\t\treturn { ...state, count: state.count + action.value };\r\n\t\tcase 'SUBTRACT_5':\r\n\t\t\treturn { ...state, count: state.count - action.value };\r\n\t\tcase 'RESET':\r\n\t\t\treturn { ...state, count: action.value };\r\n\t\tcase 'GET_USER_INPUT':\r\n\t\t\treturn { ...state, userInput: action.value };\r\n\t\tcase 'MULTIPLY':\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcount: state.count * state.userInput,\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import { createStore } from 'redux';\r\nimport { rootReducer } from './Reducer';\r\n\r\nconst myStore = createStore(rootReducer);\r\nexport default myStore;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './CSS/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport myStore from './Redux/Store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={myStore}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["App.tsx","Redux/ActionCreator.tsx","Redux/Reducer.tsx","Redux/Store.tsx","index.tsx"],"names":["DisplayWrapper","styled","div","Button","button","connect","state","count","dispatch","increment","type","decrement","add_5","value","subtract_5","reset","getUserInput","event","multiply","props","onClick","onChange","style","fontSize","initialState","userInput","myStore","createStore","action","parseInt","target","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"msBAgBA,IAAMA,EAAiBC,IAAOC,IAAV,KAMdC,EAASF,IAAOG,OAAV,KAmDZ,IAmBeC,eAnBS,SAACC,GACvB,MAAO,CACLC,MAAOD,EAAMC,UAIU,SAACC,GAC1B,MAAO,CACLC,UAAW,kBAAMD,EC7EZ,CAAEE,KAAM,eD8EbC,UAAW,kBAAMH,EC1EZ,CAAEE,KAAM,eD2EbE,MAAO,kBAAMJ,ECvER,CAAEE,KAAM,QAASG,MAAO,KDwE7BC,WAAY,kBAAMN,ECpEb,CAAEE,KAAM,aAAcG,MAAO,KDqElCE,MAAO,kBAAMP,ECjER,CAAEE,KAAM,QAASG,MAAO,KDkE7BG,aAAc,SAACC,GAAD,OACZT,EChEsB,SAC1BS,GAEA,MAAO,CAAEP,KAAM,iBAAkBG,MAAOI,GD6D3BD,CAAaC,KACxBC,SAAU,kBAAMV,EC1DX,CAAEE,KAAM,iBD8DFL,EA5Cf,SAAac,GACX,OACE,6BACE,qCACA,kBAACnB,EAAD,KAAiBmB,EAAMZ,OACvB,6BAEA,kBAACJ,EAAD,CAAQiB,QAASD,EAAMV,WAAvB,aACA,kBAACN,EAAD,CAAQiB,QAASD,EAAMR,WAAvB,aACA,kBAACR,EAAD,CAAQiB,QAASD,EAAMP,OAAvB,SAEA,kBAACT,EAAD,CAAQiB,QAASD,EAAML,YAAvB,cACA,kBAACX,EAAD,CAAQiB,QAASD,EAAMJ,OAAvB,SACA,6BACE,kBAACZ,EAAD,CAAQiB,QAASD,EAAMD,UAAvB,eACA,2BACER,KAAK,SACLW,SAAU,SAAAJ,GAAK,OAAIE,EAAMH,aAAaC,IACtCK,MAAO,CAAEC,SAAU,iB,cE3DvBC,EAA2B,CAC/BjB,MAAO,EACPkB,UAAW,GCLEC,EADCC,aDSW,WAGT,IAFhBrB,EAEe,uDAFPkB,EACRI,EACe,uCACf,OAAQA,EAAOlB,MACb,IAAK,YACH,OAAO,2BAAKJ,GAAZ,IAAmBC,MAAOD,EAAMC,MAAQ,IAC1C,IAAK,YACH,OAAO,2BAAKD,GAAZ,IAAmBC,MAAOD,EAAMC,MAAQ,IAC1C,IAAK,QACH,OAAO,2BAAKD,GAAZ,IAAmBC,MAAOD,EAAMC,MAASqB,EAAOf,QAClD,IAAK,aACH,OAAO,2BAAKP,GAAZ,IAAmBC,MAAOD,EAAMC,MAASqB,EAAOf,QAClD,IAAK,QACH,OAAO,2BAAKP,GAAZ,IAAmBC,MAAOqB,EAAOf,QACnC,IAAK,iBACH,IAAMI,EAAQW,EAAOf,MACfA,EAAQgB,SAASZ,EAAMa,OAAOjB,OACpC,OAAO,2BAAKP,GAAZ,IAAmBmB,UAAWZ,IAChC,IAAK,WACH,OAAO,2BACFP,GADL,IAEEC,MAAOD,EAAMC,MAAQD,EAAMmB,YAE/B,QACE,OAAOnB,ME9BbyB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOR,GACf,kBAAC,EAAD,QAGJS,SAASC,eAAe,W","file":"static/js/main.ba63d606.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./CSS/App.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { Dispatch } from \"redux\";\r\nimport {\r\n  increment,\r\n  decrement,\r\n  add_5,\r\n  subtract_5,\r\n  reset,\r\n  multiply,\r\n  getUserInput,\r\n} from \"./Redux/ActionCreator\";\r\nimport { ReduxStore } from \"./Redux/Reducer\";\r\nimport styled from \"styled-components\";\r\n\r\nconst DisplayWrapper = styled.div`\r\n  color: white;\r\n  margin: 5rem 0 0;\r\n  font-size: 2rem;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin: 1rem;\r\n  color: #ffac41;\r\n  background: #ff1e56;\r\n  font-size: 1.3rem;\r\n  text-decoration: none;\r\n  border: none;\r\n  padding: 5px;\r\n  transition: 0.5s;\r\n  border-radius: 5px;\r\n  &:hover {\r\n    transform: scale(1.2);\r\n  }\r\n`;\r\n\r\ntype AppProps = {\r\n  count: number;\r\n  increment: () => void;\r\n  decrement: () => void;\r\n  add_5: () => void;\r\n  subtract_5: () => void;\r\n  reset: () => void;\r\n  multiply: () => void;\r\n  getUserInput: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n};\r\n\r\nfunction App(props: AppProps) {\r\n  return (\r\n    <div>\r\n      <h1>hello</h1>\r\n      <DisplayWrapper>{props.count}</DisplayWrapper>\r\n      <br />\r\n\r\n      <Button onClick={props.increment}>INCREMENT</Button>\r\n      <Button onClick={props.decrement}>DECREMENT</Button>\r\n      <Button onClick={props.add_5}>Add 5</Button>\r\n\r\n      <Button onClick={props.subtract_5}>Subtract 5</Button>\r\n      <Button onClick={props.reset}>Reset</Button>\r\n      <div>\r\n        <Button onClick={props.multiply}>Multiply by</Button>\r\n        <input\r\n          type='number'\r\n          onChange={event => props.getUserInput(event)}\r\n          style={{ fontSize: \"1.5rem\" }}\r\n        ></input>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state: ReduxStore) => {\r\n  return {\r\n    count: state.count,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => {\r\n  return {\r\n    increment: () => dispatch(increment()),\r\n    decrement: () => dispatch(decrement()),\r\n    add_5: () => dispatch(add_5()),\r\n    subtract_5: () => dispatch(subtract_5()),\r\n    reset: () => dispatch(reset()),\r\n    getUserInput: (event: React.ChangeEvent<HTMLInputElement>) =>\r\n      dispatch(getUserInput(event)),\r\n    multiply: () => dispatch(multiply()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { Calculation, AddAndSubtract, GetUserInput } from \"./actionTypes\";\r\nimport React from \"react\";\r\n\r\nexport const increment = (): Calculation => {\r\n  return { type: \"INCREMENT\" };\r\n};\r\n\r\nexport const decrement = (): Calculation => {\r\n  return { type: \"DECREMENT\" };\r\n};\r\n\r\nexport const add_5 = (): AddAndSubtract => {\r\n  return { type: \"ADD_5\", value: 5 };\r\n};\r\n\r\nexport const subtract_5 = (): AddAndSubtract => {\r\n  return { type: \"SUBTRACT_5\", value: 5 };\r\n};\r\n\r\nexport const reset = (): AddAndSubtract => {\r\n  return { type: \"RESET\", value: 0 };\r\n};\r\n\r\nexport const getUserInput = (\r\n  event: React.ChangeEvent<HTMLInputElement>\r\n): GetUserInput => {\r\n  return { type: \"GET_USER_INPUT\", value: event };\r\n};\r\n\r\nexport const multiply = (): Calculation => {\r\n  return { type: \"MULTIPLY\" };\r\n};\r\n","import { DispatchActions } from \"./actionTypes\";\r\n\r\nexport type ReduxStore = {\r\n  count: number;\r\n  userInput: number;\r\n};\r\n\r\nconst initialState: ReduxStore = {\r\n  count: 0,\r\n  userInput: 0,\r\n};\r\n\r\nexport const rootReducer = (\r\n  state = initialState,\r\n  action: DispatchActions\r\n): ReduxStore => {\r\n  switch (action.type) {\r\n    case \"INCREMENT\":\r\n      return { ...state, count: state.count + 1 };\r\n    case \"DECREMENT\":\r\n      return { ...state, count: state.count - 1 };\r\n    case \"ADD_5\":\r\n      return { ...state, count: state.count + (action.value as number) };\r\n    case \"SUBTRACT_5\":\r\n      return { ...state, count: state.count - (action.value as number) };\r\n    case \"RESET\":\r\n      return { ...state, count: action.value as number };\r\n    case \"GET_USER_INPUT\":\r\n      const event = action.value as React.ChangeEvent<HTMLInputElement>;\r\n      const value = parseInt(event.target.value);\r\n      return { ...state, userInput: value };\r\n    case \"MULTIPLY\":\r\n      return {\r\n        ...state,\r\n        count: state.count * state.userInput,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore } from 'redux';\r\nimport { rootReducer } from './Reducer';\r\n\r\nconst myStore = createStore(rootReducer);\r\nexport default myStore;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./CSS/index.css\";\r\nimport App from \"./App\";\r\nimport myStore from \"./Redux/Store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={myStore}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}